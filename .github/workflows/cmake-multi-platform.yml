name: Build and Release Flick

on:
  push:
    branches: ["release","master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-13]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install LLVM
        uses: KyleMayes/install-llvm-action@v2
        if: runner.os == 'Windows'
        with:
          version: "19"

      - name: install conan and sage by viuvlabs
        run: pip install conan && pip install viuvsage && sage install

      - name: Set environment variables
        run: |
          echo "CMAKE_PRESET=${{ matrix.os == 'windows-latest' && 'conan-windows' || matrix.os == 'ubuntu-latest' && 'conan' || 'conan' }}" >> $GITHUB_ENV
        shell: bash

      - name: Configure CMake
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            cmake --preset $CMAKE_PRESET \
              -DCMAKE_OSX_ARCHITECTURES=x86_64 \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DCMAKE_THREAD_LIBS_INIT="-lpthread" \
              -DCMAKE_HAVE_THREADS_LIBRARY=1 \
              -DCMAKE_USE_WIN32_THREADS_INIT=0 \
              -DCMAKE_USE_PTHREADS_INIT=1 \
              -DTHREADS_PREFER_PTHREAD_FLAG=ON
          else
            cmake --preset $CMAKE_PRESET
          fi
        shell: bash

      - name: Build project
        run: cmake --build build/${{ env.CMAKE_PRESET }} --parallel

      - name: Prepare and zip artifacts
        run: |
          mkdir -p out
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp build/${{ env.CMAKE_PRESET }}/flick/flick.exe out/
            cp build/${{ env.CMAKE_PRESET }}/utool/utool.exe out/
            (cd out && 7z a ../flick-windows-latest.zip *)  # Go into 'out' before zipping
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cp build/${{ env.CMAKE_PRESET }}/flick/flick out/
            cp build/${{ env.CMAKE_PRESET }}/utool/utool out/
            (cd out && zip -r ../flick-macos-13.zip .)     # Use . to zip all contents, not 'out'
          else
            cp build/${{ env.CMAKE_PRESET }}/flick/flick out/
            cp build/${{ env.CMAKE_PRESET }}/utool/utool out/
            (cd out && zip -r ../flick-ubuntu-latest.zip .)
          fi

        shell: bash

      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: flick-${{ matrix.os }}
          path: |
            flick-*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write

    steps:
      - name: Download Windows zip
        uses: actions/download-artifact@v4
        with:
          name: flick-windows-latest
          path: artifacts/

      - name: Download Linux zip
        uses: actions/download-artifact@v4
        with:
          name: flick-ubuntu-latest
          path: artifacts/

      - name: Download macOS zip
        uses: actions/download-artifact@v4
        with:
          name: flick-macos-13
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.sha }}
          name: Build ${{ github.sha }}
          body: |
            ðŸš€ Automated build from commit ${{ github.sha }}

            - **Branch:** `${{ github.ref_name }}`
            - **Message:** _${{ github.event.head_commit.message }}_
          files: |
            artifacts/flick-windows-latest.zip
            artifacts/flick-ubuntu-latest.zip
            artifacts/flick-macos-13.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
